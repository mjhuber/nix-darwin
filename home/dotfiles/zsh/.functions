cover () {
    local t=$(mktemp -t cover)
    go test $COVERFLAGS -coverprofile=$t $@ \
        && go tool cover -func=$t \
        && unlink $t
}

gns() {
  if [ -z "$1" ]; then
    echo "gns <project>

    Projects:
      - stage
      - stage-rq
      - infra
      - prod
      - prod-rq"

    return
  fi
  gcloud auth print-access-token &>/dev/null || gcloud auth login
  case $1 in
    stage | staging | s)
      GCP_PROJECT=recharge-stage-services-8e59
      CLUSTER=gke_recharge-stage-services-8e59_us-east4_staging
      ;;
    stage-rq | staging-rq | srq)
      GCP_PROJECT=recharge-stage-services-8e59
      CLUSTER=gke_recharge-stage-services-8e59_us-east4_staging-rq
      ;;      
    infra | i)
      GCP_PROJECT=recharge-infra-services-8b42
      CLUSTER=gke_recharge-infra-services-8b42_us-east4_infra
      ;;
    prod | p)
      GCP_PROJECT=recharge-prod-services-f818
      CLUSTER=gke_recharge-prod-services-f818_us-east4_prod
      ;;
    prod-rq | prq)
      GCP_PROJECT=recharge-prod-services-f818
      CLUSTER=gke_recharge-prod-services-f818_us-east4_prod-rq
      ;;
    skunk | skw)
      GCP_PROJECT=recharge-skunk-services-e212
      CLUSTER=skunk
      REGION=us-east4
      CLUSTER=gke_recharge-skunk-services-e212_us-east4_skunk
      ;;         
  esac

  gcloud config set project $GCP_PROJECT

  if [ -n "$CLUSTER" ]; then
    kubectx $CLUSTER
  fi
}

gssh() {
  IP="$(gcloud compute instances describe ${1} --format=json | jq -r '.networkInterfaces[0].networkIP')"
  echo "The ip is: ${IP}"
  ssh ${IP}
}

kroll() {
  deployment="$1"
  kubectl patch deployment ${deployment} -p \
    "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"
}

krun() {
  trap "kubectl delete po/testing-huber -n default" EXIT
  kubectl run -it testing-huber -n default --overrides='{"metadata":{"labels":{"rechargeapps.net/env":"testing-huber","rechargeapps.net/app":"testing-huber","rechargeapps.net/org":"infra","rechargeapps.net/service":"debug","rechargeapps.net/source":"na","rechargeapps.net/team":"devops"}},"spec":{"containers":[{"name":"testing-huber","tty":true,"args":["/bin/sh"],"stdin":true,"stdinOnce":true,"image":"alpine:latest","resources":{"limits":{"cpu":"200m","memory":"200Mi"},"requests":{"cpu":"200m","memory":"200Mi"}}}]}}' -l cluster-autoscaler.kubernetes.io/safe-to-evict="true" --image=alpine:latest -- /bin/sh
}

switch() {
  plugins="$(asdf plugin-list)"

  if [[ $plugins =~ .*$1.* ]]; then
    # plugin installed

    version="$(asdf list $1)"
    if [[ $version != *"$2"* ]]; then
      # version isn't installed
      echo "Installing version now."
      asdf install $1 $2
    fi

    if [[ -f $PWD/.tool-versions ]]; then
      # local setting
      asdf local $1 $2
    else
      asdf global $1 $2
    fi
  else
    echo "$1 plugin not installed, exiting."
    exit 1
  fi
}
